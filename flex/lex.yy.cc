
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 8
#define YY_END_OF_BUFFER 9
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[527] =
    {   0,
        0,    0,    9,    3,    2,    2,    8,    3,    3,    3,
        3,    3,    3,    3,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
        3,    3,    0,    1,    3,    3,    0,    3,    3,    5,
        5,    1,    3,    0,    0,    3,    5,    5,    5,    5,
        5,    5,    5,    3,    0,    0,    3,    5,    5,    3,
        0,    0,    3,    5,    5,    3,    0,    0,    3,    5,
        5,    3,    0,    0,    5,    5,    3,    4,    0,    5,
        5,    3,    6,    5,    5,    3,    5,    5,    3,    5,
        5,    3,    5,    5,    3,    5,    5,    3,    5,    5,

        3,    5,    5,    3,    5,    5,    3,    5,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,

        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,

        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,

        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,

        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    3,    5,    3,    5,    3,    5,    3,    5,    3,
        5,    5,    5,    5,    5,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    8,    7,    9,   10,
       11,   12,   13,    7,    7,   14,   15,   16,   17,   18,
        7,   19,   20,   21,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,   22,    1,    7,    7,    7,    7,

        7,    7,   23,   24,   25,    7,    7,   26,    7,   27,
       28,    7,    7,   29,   30,   31,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[32] =
    {   0,
        1,    2,    2,    2,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4
    } ;

static const flex_int16_t yy_base[994] =
    {   0,
        0,   29, 1998,    0,    4,    6, 1999, 1988, 1983, 1986,
     1967, 1965, 1968,    0,    8, 1981, 1979, 1974, 1957, 1960,
     1958,    0, 1964, 1972, 1970,   10, 1959, 1952,    0, 1958,
     1958, 1970,   13,   15, 1946,    0, 1958, 1953, 1957,   19,
       59,   25,    0, 1967, 1954, 1957,   33,   36,   42,   81,
       48,   54,   63,    0, 1951,  799,   85,   66,   69,    0,
       71,   34,   31,   72,   75,    0,   26,   32,    0,   85,
       88,    0,   12,   13,   91,   94,    0, 1999,    3,   97,
      102,    0, 1999,  105,  108,    0,  111,  114,    0,  117,
      120,    0,  123,  126,    0,  129,  132,    0,  135,  138,

        0,  141,  144,    0,  147,  150,    0,  153,  156,    0,
      159,    0,  162,    0,  165,    0,  168,    0,  171,    0,
      174,    0,  177,    0,  180,    0,  183,    0,  186,    0,
      189,    0,  192,    0,  195,    0,  198,    0,  201,    0,
      204,    0,  207,    0,  210,    0,  213,    0,  216,    0,
      219,    0,  222,    0,  225,    0,  228,    0,  231,    0,
      234,    0,  237,    0,  240,    0,  243,    0,  246,    0,
      249,    0,  252,    0,  255,    0,  258,    0,  261,    0,
      264,    0,  267,    0,  270,    0,  273,    0,  276,    0,
      279,    0,  282,    0,  285,    0,  288,    0,  291,    0,

      294,    0,  297,    0,  300,    0,  303,    0,  306,    0,
      309,    0,  312,    0,  315,    0,  318,    0,  321,    0,
      324,    0,  327,    0,  330,    0,  333,    0,  336,    0,
      339,    0,  342,    0,  345,    0,  348,    0,  351,    0,
      354,    0,  357,    0,  360,    0,  363,    0,  366,    0,
      369,    0,  372,    0,  375,    0,  378,    0,  381,    0,
      384,    0,  387,    0,  390,    0,  393,    0,  396,    0,
      399,    0,  402,    0,  405,    0,  408,    0,  411,    0,
      414,    0,  417,    0,  420,    0,  423,    0,  426,    0,
      429,    0,  432,    0,  435,    0,  438,    0,  441,    0,

      444,    0,  447,    0,  450,    0,  453,    0,  456,    0,
      459,    0,  462,    0,  465,    0,  468,    0,  471,    0,
      474,    0,  477,    0,  480,    0,  483,    0,  486,    0,
      489,    0,  492,    0,  495,    0,  498,    0,  501,    0,
      504,    0,  507,    0,  510,    0,  513,    0,  516,    0,
      519,    0,  522,    0,  525,    0,  528,    0,  531,    0,
      534,    0,  537,    0,  540,    0,  543,    0,  546,    0,
      549,    0,  552,    0,  555,    0,  558,    0,  561,    0,
      564,    0,  567,    0,  570,    0,  573,    0,  576,    0,
      579,    0,  582,    0,  585,    0,  588,    0,  591,    0,

      594,    0,  597,    0,  600,    0,  603,    0,  606,    0,
      609,    0,  612,    0,  615,    0,  618,    0,  621,    0,
      624,    0,  627,    0,  630,    0,  633,    0,  636,    0,
      639,    0,  642,    0,  645,    0,  648,    0,  651,    0,
      654,    0,  657,    0,  660,    0,  663,    0,  666,    0,
      669,    0,  672,    0,  675,    0,  678,    0,  681,    0,
      684,    0,  687,    0,  690,    0,  693,    0,  696,    0,
      699,    0,  702,    0,  705,    0,  708,    0,  711,    0,
      714,    0,  717,    0,  720,    0,  723,    0,  726,    0,
      729,    0,  732,    0,  735,    0,  738,    0,  741,    0,

      744,    0,  747,    0,  750,    0,  753,    0,  756,    0,
      759,    0,  762,    0,  765,    0,  768,    0,  771, 1999,
      774,  777,  780,  783,  786, 1999,  790,  792,  794,  796,
      798,  802,  804,  807,  811,  813,  816,  819,  821,  824,
      827,  829,  832,  835,  837,  840,  843,  845,  848,  851,
      853,  856,  859,  861,  864,  867,  869,  872,  875,  877,
      880,  883,  885,  888,  891,  893,  896,  899,  901,  904,
      907,  909,  912,  915,  917,  920,  923,  925,  928,  930,
      933,  935,  938,  940,  943,  945,  948,  950,  953,  955,
      958,  960,  963,  965,  968,  970,  973,  975,  978,  980,

      983,  985,  988,  990,  993,  995,  998, 1000, 1003, 1005,
     1008, 1010, 1013, 1015, 1018, 1020, 1023, 1025, 1028, 1030,
     1033, 1035, 1038, 1040, 1043, 1045, 1048, 1050, 1053, 1055,
     1058, 1060, 1063, 1065, 1068, 1070, 1073, 1075, 1078, 1080,
     1083, 1085, 1088, 1090, 1093, 1095, 1098, 1100, 1103, 1105,
     1108, 1110, 1113, 1115, 1118, 1120, 1123, 1125, 1128, 1130,
     1133, 1135, 1138, 1140, 1143, 1145, 1148, 1150, 1153, 1155,
     1158, 1160, 1163, 1165, 1168, 1170, 1173, 1175, 1178, 1180,
     1183, 1185, 1188, 1190, 1193, 1195, 1198, 1200, 1203, 1205,
     1208, 1210, 1213, 1215, 1218, 1220, 1223, 1225, 1228, 1230,

     1233, 1235, 1238, 1240, 1243, 1245, 1248, 1250, 1253, 1255,
     1258, 1260, 1263, 1265, 1268, 1270, 1273, 1275, 1278, 1280,
     1283, 1285, 1288, 1290, 1293, 1295, 1298, 1300, 1303, 1305,
     1308, 1310, 1313, 1315, 1318, 1320, 1323, 1325, 1328, 1330,
     1333, 1335, 1338, 1340, 1343, 1345, 1348, 1350, 1353, 1355,
     1358, 1360, 1363, 1365, 1368, 1370, 1373, 1375, 1378, 1380,
     1383, 1385, 1388, 1390, 1393, 1395, 1398, 1400, 1403, 1405,
     1408, 1410, 1413, 1415, 1418, 1420, 1423, 1425, 1428, 1430,
     1433, 1435, 1438, 1440, 1443, 1445, 1448, 1450, 1453, 1455,
     1458, 1460, 1463, 1465, 1468, 1470, 1473, 1475, 1478, 1480,

     1483, 1485, 1488, 1490, 1493, 1495, 1498, 1500, 1503, 1505,
     1508, 1510, 1513, 1515, 1518, 1520, 1523, 1525, 1528, 1530,
     1533, 1535, 1538, 1540, 1543, 1545, 1548, 1550, 1553, 1555,
     1558, 1560, 1563, 1565, 1568, 1570, 1573, 1575, 1578, 1580,
     1583, 1585, 1588, 1590, 1593, 1595, 1598, 1600, 1603, 1605,
     1608, 1610, 1613, 1615, 1618, 1620, 1623, 1625, 1628, 1630,
     1633, 1635, 1638, 1640, 1643, 1645, 1648, 1650, 1653, 1655,
     1658, 1660, 1663, 1665, 1668, 1670, 1673, 1675, 1678, 1680,
     1683, 1685, 1688, 1690, 1693, 1695, 1698, 1700, 1703, 1705,
     1708, 1710, 1713, 1715, 1718, 1720, 1723, 1725, 1728, 1730,

     1733, 1735, 1738, 1740, 1743, 1745, 1748, 1750, 1753, 1755,
     1758, 1760, 1763, 1765, 1768, 1770, 1773, 1775, 1778, 1780,
     1783, 1785, 1788, 1790, 1793, 1795, 1798, 1800, 1803, 1805,
     1808, 1810, 1813, 1815, 1818, 1820, 1823, 1825, 1828, 1830,
     1833, 1835, 1838, 1840, 1843, 1845, 1848, 1850, 1853, 1855,
     1858, 1860, 1863, 1865, 1868, 1870, 1873, 1875, 1878, 1880,
     1883, 1885, 1888, 1890, 1893, 1895, 1898, 1900, 1903, 1905,
     1908, 1910, 1913, 1915, 1918, 1920, 1923, 1925, 1928, 1930,
     1933, 1935, 1938, 1940, 1943, 1945, 1948, 1950, 1953, 1956,
     1959, 1962, 1965

    } ;

static const flex_int16_t yy_def[994] =
    {   0,
      527,  527,  526,  528,  528,  526,  526,  528,  528,  528,
      528,  528,  528,  529,  526,  529,  529,  529,  529,  529,
      529,  530,  530,  530,  530,  530,  530,  530,  531,  531,
      531,  531,  532,  531,  531,  533,  526,  533,  533,  534,
      535,  533,  536,  526,  526,  536,  526,  526,  537,  535,
      532,  534,  538,  539,  526,  526,  539,  540,  541,  542,
      526,  526,  542,  543,  544,  545,  526,  526,  545,  546,
      547,  548,  526,  526,  549,  550,  551,  526,  526,  552,
      553,  554,  526,  555,  556,  557,  558,  559,  560,  561,
      562,  563,  564,  565,  566,  567,  568,  569,  570,  571,

      572,  573,  574,  575,  576,  577,  578,  579,  576,  580,
      581,  582,  583,  584,  585,  586,  587,  588,  589,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  599,  600,
      601,  602,  603,  604,  605,  606,  607,  608,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  618,  619,  620,
      621,  622,  623,  624,  625,  626,  627,  628,  629,  630,
      631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
      641,  642,  643,  644,  645,  646,  647,  648,  649,  650,
      651,  652,  653,  654,  655,  656,  657,  658,  659,  660,
      661,  662,  663,  664,  665,  666,  667,  668,  669,  670,

      671,  672,  673,  674,  675,  676,  677,  678,  679,  680,
      681,  682,  683,  684,  685,  686,  687,  688,  689,  690,
      691,  692,  693,  694,  695,  696,  697,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      721,  722,  723,  724,  725,  726,  727,  728,  729,  730,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  753,  754,  755,  756,  757,  758,  759,  760,
      761,  762,  763,  764,  765,  766,  767,  768,  769,  770,

      771,  772,  773,  774,  775,  776,  777,  778,  779,  780,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  790,
      791,  792,  793,  794,  795,  796,  797,  798,  799,  800,
      801,  802,  803,  804,  805,  806,  807,  808,  809,  810,
      811,  812,  813,  814,  815,  816,  817,  818,  819,  820,
      821,  822,  823,  824,  825,  826,  827,  828,  829,  830,
      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
      851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,

      871,  872,  873,  874,  875,  876,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  887,  888,  889,  890,
      891,  892,  893,  894,  895,  896,  897,  898,  899,  900,
      901,  902,  903,  904,  905,  906,  907,  908,  909,  910,
      911,  912,  913,  914,  915,  916,  917,  918,  919,  920,
      921,  922,  923,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  945,  946,  947,  948,  949,  950,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,

      971,  972,  973,  974,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  526,
      990,  991,  992,  993,  526,    0,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526

    } ;

static const flex_int16_t yy_nxt[2031] =
    {   0,
      526,    5,    6,  526,    7,   15,   15,   15,   15,   15,
       15,   33,   33,    8,   41,   33,   33,   33,    9,   10,
       47,   47,   48,   83,   11,   12,   33,   33,   79,   13,
        5,    6,   78,    7,   47,   47,   48,   47,   47,   48,
       74,   73,    8,   47,   47,   48,   69,    9,   10,   50,
       51,   52,   68,   11,   12,   47,   47,   48,   13,   40,
       50,   51,   52,   49,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   67,
       40,   40,   50,   51,   52,   49,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,

       48,   63,   40,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,

       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,

       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,

       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,

       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,

       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,

       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
       47,   47,   48,   47,   47,   48,   47,   47,   48,   47,
       47,   48,   47,   47,   48,   47,   47,   48,   47,   47,
       48,   47,   47,   48,   47,   47,   48,   47,   47,   48,
        4,    4,    4,    4,   14,   14,   22,   22,   29,   29,

       36,   36,   40,   40,   62,   40,   43,   43,   49,   49,
       49,   53,   53,   53,   53,   54,   54,   58,   58,   58,
       59,   59,   59,   60,   60,   64,   64,   64,   65,   65,
       65,   66,   66,   70,   70,   70,   71,   71,   71,   72,
       72,   75,   75,   75,   76,   76,   76,   77,   77,   80,
       80,   80,   81,   81,   81,   82,   82,   84,   84,   84,
       85,   85,   85,   86,   86,   87,   87,   87,   88,   88,
       88,   89,   89,   90,   90,   90,   91,   91,   91,   92,
       92,   93,   93,   93,   94,   94,   94,   95,   95,   96,
       96,   96,   97,   97,   97,   98,   98,   99,   99,   99,

      100,  100,  100,  101,  101,  102,  102,  102,  103,  103,
      103,  104,  104,  105,  105,  105,  106,  106,  106,  107,
      107,  108,  108,  108,  109,  109,  109,  110,  110,  111,
      111,  111,  112,  112,  113,  113,  113,  114,  114,  115,
      115,  115,  116,  116,  117,  117,  117,  118,  118,  119,
      119,  119,  120,  120,  121,  121,  121,  122,  122,  123,
      123,  123,  124,  124,  125,  125,  125,  126,  126,  127,
      127,  127,  128,  128,  129,  129,  129,  130,  130,  131,
      131,  131,  132,  132,  133,  133,  133,  134,  134,  135,
      135,  135,  136,  136,  137,  137,  137,  138,  138,  139,

      139,  139,  140,  140,  141,  141,  141,  142,  142,  143,
      143,  143,  144,  144,  145,  145,  145,  146,  146,  147,
      147,  147,  148,  148,  149,  149,  149,  150,  150,  151,
      151,  151,  152,  152,  153,  153,  153,  154,  154,  155,
      155,  155,  156,  156,  157,  157,  157,  158,  158,  159,
      159,  159,  160,  160,  161,  161,  161,  162,  162,  163,
      163,  163,  164,  164,  165,  165,  165,  166,  166,  167,
      167,  167,  168,  168,  169,  169,  169,  170,  170,  171,
      171,  171,  172,  172,  173,  173,  173,  174,  174,  175,
      175,  175,  176,  176,  177,  177,  177,  178,  178,  179,

      179,  179,  180,  180,  181,  181,  181,  182,  182,  183,
      183,  183,  184,  184,  185,  185,  185,  186,  186,  187,
      187,  187,  188,  188,  189,  189,  189,  190,  190,  191,
      191,  191,  192,  192,  193,  193,  193,  194,  194,  195,
      195,  195,  196,  196,  197,  197,  197,  198,  198,  199,
      199,  199,  200,  200,  201,  201,  201,  202,  202,  203,
      203,  203,  204,  204,  205,  205,  205,  206,  206,  207,
      207,  207,  208,  208,  209,  209,  209,  210,  210,  211,
      211,  211,  212,  212,  213,  213,  213,  214,  214,  215,
      215,  215,  216,  216,  217,  217,  217,  218,  218,  219,

      219,  219,  220,  220,  221,  221,  221,  222,  222,  223,
      223,  223,  224,  224,  225,  225,  225,  226,  226,  227,
      227,  227,  228,  228,  229,  229,  229,  230,  230,  231,
      231,  231,  232,  232,  233,  233,  233,  234,  234,  235,
      235,  235,  236,  236,  237,  237,  237,  238,  238,  239,
      239,  239,  240,  240,  241,  241,  241,  242,  242,  243,
      243,  243,  244,  244,  245,  245,  245,  246,  246,  247,
      247,  247,  248,  248,  249,  249,  249,  250,  250,  251,
      251,  251,  252,  252,  253,  253,  253,  254,  254,  255,
      255,  255,  256,  256,  257,  257,  257,  258,  258,  259,

      259,  259,  260,  260,  261,  261,  261,  262,  262,  263,
      263,  263,  264,  264,  265,  265,  265,  266,  266,  267,
      267,  267,  268,  268,  269,  269,  269,  270,  270,  271,
      271,  271,  272,  272,  273,  273,  273,  274,  274,  275,
      275,  275,  276,  276,  277,  277,  277,  278,  278,  279,
      279,  279,  280,  280,  281,  281,  281,  282,  282,  283,
      283,  283,  284,  284,  285,  285,  285,  286,  286,  287,
      287,  287,  288,  288,  289,  289,  289,  290,  290,  291,
      291,  291,  292,  292,  293,  293,  293,  294,  294,  295,
      295,  295,  296,  296,  297,  297,  297,  298,  298,  299,

      299,  299,  300,  300,  301,  301,  301,  302,  302,  303,
      303,  303,  304,  304,  305,  305,  305,  306,  306,  307,
      307,  307,  308,  308,  309,  309,  309,  310,  310,  311,
      311,  311,  312,  312,  313,  313,  313,  314,  314,  315,
      315,  315,  316,  316,  317,  317,  317,  318,  318,  319,
      319,  319,  320,  320,  321,  321,  321,  322,  322,  323,
      323,  323,  324,  324,  325,  325,  325,  326,  326,  327,
      327,  327,  328,  328,  329,  329,  329,  330,  330,  331,
      331,  331,  332,  332,  333,  333,  333,  334,  334,  335,
      335,  335,  336,  336,  337,  337,  337,  338,  338,  339,

      339,  339,  340,  340,  341,  341,  341,  342,  342,  343,
      343,  343,  344,  344,  345,  345,  345,  346,  346,  347,
      347,  347,  348,  348,  349,  349,  349,  350,  350,  351,
      351,  351,  352,  352,  353,  353,  353,  354,  354,  355,
      355,  355,  356,  356,  357,  357,  357,  358,  358,  359,
      359,  359,  360,  360,  361,  361,  361,  362,  362,  363,
      363,  363,  364,  364,  365,  365,  365,  366,  366,  367,
      367,  367,  368,  368,  369,  369,  369,  370,  370,  371,
      371,  371,  372,  372,  373,  373,  373,  374,  374,  375,
      375,  375,  376,  376,  377,  377,  377,  378,  378,  379,

      379,  379,  380,  380,  381,  381,  381,  382,  382,  383,
      383,  383,  384,  384,  385,  385,  385,  386,  386,  387,
      387,  387,  388,  388,  389,  389,  389,  390,  390,  391,
      391,  391,  392,  392,  393,  393,  393,  394,  394,  395,
      395,  395,  396,  396,  397,  397,  397,  398,  398,  399,
      399,  399,  400,  400,  401,  401,  401,  402,  402,  403,
      403,  403,  404,  404,  405,  405,  405,  406,  406,  407,
      407,  407,  408,  408,  409,  409,  409,  410,  410,  411,
      411,  411,  412,  412,  413,  413,  413,  414,  414,  415,
      415,  415,  416,  416,  417,  417,  417,  418,  418,  419,

      419,  419,  420,  420,  421,  421,  421,  422,  422,  423,
      423,  423,  424,  424,  425,  425,  425,  426,  426,  427,
      427,  427,  428,  428,  429,  429,  429,  430,  430,  431,
      431,  431,  432,  432,  433,  433,  433,  434,  434,  435,
      435,  435,  436,  436,  437,  437,  437,  438,  438,  439,
      439,  439,  440,  440,  441,  441,  441,  442,  442,  443,
      443,  443,  444,  444,  445,  445,  445,  446,  446,  447,
      447,  447,  448,  448,  449,  449,  449,  450,  450,  451,
      451,  451,  452,  452,  453,  453,  453,  454,  454,  455,
      455,  455,  456,  456,  457,  457,  457,  458,  458,  459,

      459,  459,  460,  460,  461,  461,  461,  462,  462,  463,
      463,  463,  464,  464,  465,  465,  465,  466,  466,  467,
      467,  467,  468,  468,  469,  469,  469,  470,  470,  471,
      471,  471,  472,  472,  473,  473,  473,  474,  474,  475,
      475,  475,  476,  476,  477,  477,  477,  478,  478,  479,
      479,  479,  480,  480,  481,  481,  481,  482,  482,  483,
      483,  483,  484,  484,  485,  485,  485,  486,  486,  487,
      487,  487,  488,  488,  489,  489,  489,  490,  490,  491,
      491,  491,  492,  492,  493,  493,  493,  494,  494,  495,
      495,  495,  496,  496,  497,  497,  497,  498,  498,  499,

      499,  499,  500,  500,  501,  501,  501,  502,  502,  503,
      503,  503,  504,  504,  505,  505,  505,  506,  506,  507,
      507,  507,  508,  508,  509,  509,  509,  510,  510,  511,
      511,  511,  512,  512,  513,  513,  513,  514,  514,  515,
      515,  515,  516,  516,  517,  517,  517,  518,  518,  519,
      519,  519,  520,  520,  521,  521,  521,  522,  522,  522,
      523,  523,  523,  524,  524,  524,  525,  525,  525,   61,
       57,   56,   55,   46,   45,   44,   42,   39,   38,   37,
       35,   34,   32,   31,   30,   28,   27,   26,   25,   24,
       23,   21,   20,   19,   18,   17,   16,  526,    3,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526
    } ;

static const flex_int16_t yy_chk[2031] =
    {   0,
        0,    1,    1,    0,    1,    5,    5,    6,    6,   15,
       15,   26,   26,    1,   33,   33,   34,   34,    1,    1,
       40,   40,   40,   79,    1,    1,   42,   42,   74,    1,
        2,    2,   73,    2,   47,   47,   47,   48,   48,   48,
       68,   67,    2,   49,   49,   49,   63,    2,    2,   51,
       51,   51,   62,    2,    2,   52,   52,   52,    2,   41,
       41,   41,   41,   41,   53,   53,   53,   58,   58,   58,
       59,   59,   59,   64,   64,   64,   65,   65,   65,   61,
       41,   50,   50,   50,   50,   50,   70,   70,   70,   71,
       71,   71,   75,   75,   75,   76,   76,   76,   80,   80,

       80,   57,   50,   81,   81,   81,   84,   84,   84,   85,
       85,   85,   87,   87,   87,   88,   88,   88,   90,   90,
       90,   91,   91,   91,   93,   93,   93,   94,   94,   94,
       96,   96,   96,   97,   97,   97,   99,   99,   99,  100,
      100,  100,  102,  102,  102,  103,  103,  103,  105,  105,
      105,  106,  106,  106,  108,  108,  108,  109,  109,  109,
      111,  111,  111,  113,  113,  113,  115,  115,  115,  117,
      117,  117,  119,  119,  119,  121,  121,  121,  123,  123,
      123,  125,  125,  125,  127,  127,  127,  129,  129,  129,
      131,  131,  131,  133,  133,  133,  135,  135,  135,  137,

      137,  137,  139,  139,  139,  141,  141,  141,  143,  143,
      143,  145,  145,  145,  147,  147,  147,  149,  149,  149,
      151,  151,  151,  153,  153,  153,  155,  155,  155,  157,
      157,  157,  159,  159,  159,  161,  161,  161,  163,  163,
      163,  165,  165,  165,  167,  167,  167,  169,  169,  169,
      171,  171,  171,  173,  173,  173,  175,  175,  175,  177,
      177,  177,  179,  179,  179,  181,  181,  181,  183,  183,
      183,  185,  185,  185,  187,  187,  187,  189,  189,  189,
      191,  191,  191,  193,  193,  193,  195,  195,  195,  197,
      197,  197,  199,  199,  199,  201,  201,  201,  203,  203,

      203,  205,  205,  205,  207,  207,  207,  209,  209,  209,
      211,  211,  211,  213,  213,  213,  215,  215,  215,  217,
      217,  217,  219,  219,  219,  221,  221,  221,  223,  223,
      223,  225,  225,  225,  227,  227,  227,  229,  229,  229,
      231,  231,  231,  233,  233,  233,  235,  235,  235,  237,
      237,  237,  239,  239,  239,  241,  241,  241,  243,  243,
      243,  245,  245,  245,  247,  247,  247,  249,  249,  249,
      251,  251,  251,  253,  253,  253,  255,  255,  255,  257,
      257,  257,  259,  259,  259,  261,  261,  261,  263,  263,
      263,  265,  265,  265,  267,  267,  267,  269,  269,  269,

      271,  271,  271,  273,  273,  273,  275,  275,  275,  277,
      277,  277,  279,  279,  279,  281,  281,  281,  283,  283,
      283,  285,  285,  285,  287,  287,  287,  289,  289,  289,
      291,  291,  291,  293,  293,  293,  295,  295,  295,  297,
      297,  297,  299,  299,  299,  301,  301,  301,  303,  303,
      303,  305,  305,  305,  307,  307,  307,  309,  309,  309,
      311,  311,  311,  313,  313,  313,  315,  315,  315,  317,
      317,  317,  319,  319,  319,  321,  321,  321,  323,  323,
      323,  325,  325,  325,  327,  327,  327,  329,  329,  329,
      331,  331,  331,  333,  333,  333,  335,  335,  335,  337,

      337,  337,  339,  339,  339,  341,  341,  341,  343,  343,
      343,  345,  345,  345,  347,  347,  347,  349,  349,  349,
      351,  351,  351,  353,  353,  353,  355,  355,  355,  357,
      357,  357,  359,  359,  359,  361,  361,  361,  363,  363,
      363,  365,  365,  365,  367,  367,  367,  369,  369,  369,
      371,  371,  371,  373,  373,  373,  375,  375,  375,  377,
      377,  377,  379,  379,  379,  381,  381,  381,  383,  383,
      383,  385,  385,  385,  387,  387,  387,  389,  389,  389,
      391,  391,  391,  393,  393,  393,  395,  395,  395,  397,
      397,  397,  399,  399,  399,  401,  401,  401,  403,  403,

      403,  405,  405,  405,  407,  407,  407,  409,  409,  409,
      411,  411,  411,  413,  413,  413,  415,  415,  415,  417,
      417,  417,  419,  419,  419,  421,  421,  421,  423,  423,
      423,  425,  425,  425,  427,  427,  427,  429,  429,  429,
      431,  431,  431,  433,  433,  433,  435,  435,  435,  437,
      437,  437,  439,  439,  439,  441,  441,  441,  443,  443,
      443,  445,  445,  445,  447,  447,  447,  449,  449,  449,
      451,  451,  451,  453,  453,  453,  455,  455,  455,  457,
      457,  457,  459,  459,  459,  461,  461,  461,  463,  463,
      463,  465,  465,  465,  467,  467,  467,  469,  469,  469,

      471,  471,  471,  473,  473,  473,  475,  475,  475,  477,
      477,  477,  479,  479,  479,  481,  481,  481,  483,  483,
      483,  485,  485,  485,  487,  487,  487,  489,  489,  489,
      491,  491,  491,  493,  493,  493,  495,  495,  495,  497,
      497,  497,  499,  499,  499,  501,  501,  501,  503,  503,
      503,  505,  505,  505,  507,  507,  507,  509,  509,  509,
      511,  511,  511,  513,  513,  513,  515,  515,  515,  517,
      517,  517,  519,  519,  519,  521,  521,  521,  522,  522,
      522,  523,  523,  523,  524,  524,  524,  525,  525,  525,
      527,  527,  527,  527,  528,  528,  529,  529,  530,  530,

      531,  531,  532,  532,   56,  532,  533,  533,  534,  534,
      534,  535,  535,  535,  535,  536,  536,  537,  537,  537,
      538,  538,  538,  539,  539,  540,  540,  540,  541,  541,
      541,  542,  542,  543,  543,  543,  544,  544,  544,  545,
      545,  546,  546,  546,  547,  547,  547,  548,  548,  549,
      549,  549,  550,  550,  550,  551,  551,  552,  552,  552,
      553,  553,  553,  554,  554,  555,  555,  555,  556,  556,
      556,  557,  557,  558,  558,  558,  559,  559,  559,  560,
      560,  561,  561,  561,  562,  562,  562,  563,  563,  564,
      564,  564,  565,  565,  565,  566,  566,  567,  567,  567,

      568,  568,  568,  569,  569,  570,  570,  570,  571,  571,
      571,  572,  572,  573,  573,  573,  574,  574,  574,  575,
      575,  576,  576,  576,  577,  577,  577,  578,  578,  579,
      579,  579,  580,  580,  581,  581,  581,  582,  582,  583,
      583,  583,  584,  584,  585,  585,  585,  586,  586,  587,
      587,  587,  588,  588,  589,  589,  589,  590,  590,  591,
      591,  591,  592,  592,  593,  593,  593,  594,  594,  595,
      595,  595,  596,  596,  597,  597,  597,  598,  598,  599,
      599,  599,  600,  600,  601,  601,  601,  602,  602,  603,
      603,  603,  604,  604,  605,  605,  605,  606,  606,  607,

      607,  607,  608,  608,  609,  609,  609,  610,  610,  611,
      611,  611,  612,  612,  613,  613,  613,  614,  614,  615,
      615,  615,  616,  616,  617,  617,  617,  618,  618,  619,
      619,  619,  620,  620,  621,  621,  621,  622,  622,  623,
      623,  623,  624,  624,  625,  625,  625,  626,  626,  627,
      627,  627,  628,  628,  629,  629,  629,  630,  630,  631,
      631,  631,  632,  632,  633,  633,  633,  634,  634,  635,
      635,  635,  636,  636,  637,  637,  637,  638,  638,  639,
      639,  639,  640,  640,  641,  641,  641,  642,  642,  643,
      643,  643,  644,  644,  645,  645,  645,  646,  646,  647,

      647,  647,  648,  648,  649,  649,  649,  650,  650,  651,
      651,  651,  652,  652,  653,  653,  653,  654,  654,  655,
      655,  655,  656,  656,  657,  657,  657,  658,  658,  659,
      659,  659,  660,  660,  661,  661,  661,  662,  662,  663,
      663,  663,  664,  664,  665,  665,  665,  666,  666,  667,
      667,  667,  668,  668,  669,  669,  669,  670,  670,  671,
      671,  671,  672,  672,  673,  673,  673,  674,  674,  675,
      675,  675,  676,  676,  677,  677,  677,  678,  678,  679,
      679,  679,  680,  680,  681,  681,  681,  682,  682,  683,
      683,  683,  684,  684,  685,  685,  685,  686,  686,  687,

      687,  687,  688,  688,  689,  689,  689,  690,  690,  691,
      691,  691,  692,  692,  693,  693,  693,  694,  694,  695,
      695,  695,  696,  696,  697,  697,  697,  698,  698,  699,
      699,  699,  700,  700,  701,  701,  701,  702,  702,  703,
      703,  703,  704,  704,  705,  705,  705,  706,  706,  707,
      707,  707,  708,  708,  709,  709,  709,  710,  710,  711,
      711,  711,  712,  712,  713,  713,  713,  714,  714,  715,
      715,  715,  716,  716,  717,  717,  717,  718,  718,  719,
      719,  719,  720,  720,  721,  721,  721,  722,  722,  723,
      723,  723,  724,  724,  725,  725,  725,  726,  726,  727,

      727,  727,  728,  728,  729,  729,  729,  730,  730,  731,
      731,  731,  732,  732,  733,  733,  733,  734,  734,  735,
      735,  735,  736,  736,  737,  737,  737,  738,  738,  739,
      739,  739,  740,  740,  741,  741,  741,  742,  742,  743,
      743,  743,  744,  744,  745,  745,  745,  746,  746,  747,
      747,  747,  748,  748,  749,  749,  749,  750,  750,  751,
      751,  751,  752,  752,  753,  753,  753,  754,  754,  755,
      755,  755,  756,  756,  757,  757,  757,  758,  758,  759,
      759,  759,  760,  760,  761,  761,  761,  762,  762,  763,
      763,  763,  764,  764,  765,  765,  765,  766,  766,  767,

      767,  767,  768,  768,  769,  769,  769,  770,  770,  771,
      771,  771,  772,  772,  773,  773,  773,  774,  774,  775,
      775,  775,  776,  776,  777,  777,  777,  778,  778,  779,
      779,  779,  780,  780,  781,  781,  781,  782,  782,  783,
      783,  783,  784,  784,  785,  785,  785,  786,  786,  787,
      787,  787,  788,  788,  789,  789,  789,  790,  790,  791,
      791,  791,  792,  792,  793,  793,  793,  794,  794,  795,
      795,  795,  796,  796,  797,  797,  797,  798,  798,  799,
      799,  799,  800,  800,  801,  801,  801,  802,  802,  803,
      803,  803,  804,  804,  805,  805,  805,  806,  806,  807,

      807,  807,  808,  808,  809,  809,  809,  810,  810,  811,
      811,  811,  812,  812,  813,  813,  813,  814,  814,  815,
      815,  815,  816,  816,  817,  817,  817,  818,  818,  819,
      819,  819,  820,  820,  821,  821,  821,  822,  822,  823,
      823,  823,  824,  824,  825,  825,  825,  826,  826,  827,
      827,  827,  828,  828,  829,  829,  829,  830,  830,  831,
      831,  831,  832,  832,  833,  833,  833,  834,  834,  835,
      835,  835,  836,  836,  837,  837,  837,  838,  838,  839,
      839,  839,  840,  840,  841,  841,  841,  842,  842,  843,
      843,  843,  844,  844,  845,  845,  845,  846,  846,  847,

      847,  847,  848,  848,  849,  849,  849,  850,  850,  851,
      851,  851,  852,  852,  853,  853,  853,  854,  854,  855,
      855,  855,  856,  856,  857,  857,  857,  858,  858,  859,
      859,  859,  860,  860,  861,  861,  861,  862,  862,  863,
      863,  863,  864,  864,  865,  865,  865,  866,  866,  867,
      867,  867,  868,  868,  869,  869,  869,  870,  870,  871,
      871,  871,  872,  872,  873,  873,  873,  874,  874,  875,
      875,  875,  876,  876,  877,  877,  877,  878,  878,  879,
      879,  879,  880,  880,  881,  881,  881,  882,  882,  883,
      883,  883,  884,  884,  885,  885,  885,  886,  886,  887,

      887,  887,  888,  888,  889,  889,  889,  890,  890,  891,
      891,  891,  892,  892,  893,  893,  893,  894,  894,  895,
      895,  895,  896,  896,  897,  897,  897,  898,  898,  899,
      899,  899,  900,  900,  901,  901,  901,  902,  902,  903,
      903,  903,  904,  904,  905,  905,  905,  906,  906,  907,
      907,  907,  908,  908,  909,  909,  909,  910,  910,  911,
      911,  911,  912,  912,  913,  913,  913,  914,  914,  915,
      915,  915,  916,  916,  917,  917,  917,  918,  918,  919,
      919,  919,  920,  920,  921,  921,  921,  922,  922,  923,
      923,  923,  924,  924,  925,  925,  925,  926,  926,  927,

      927,  927,  928,  928,  929,  929,  929,  930,  930,  931,
      931,  931,  932,  932,  933,  933,  933,  934,  934,  935,
      935,  935,  936,  936,  937,  937,  937,  938,  938,  939,
      939,  939,  940,  940,  941,  941,  941,  942,  942,  943,
      943,  943,  944,  944,  945,  945,  945,  946,  946,  947,
      947,  947,  948,  948,  949,  949,  949,  950,  950,  951,
      951,  951,  952,  952,  953,  953,  953,  954,  954,  955,
      955,  955,  956,  956,  957,  957,  957,  958,  958,  959,
      959,  959,  960,  960,  961,  961,  961,  962,  962,  963,
      963,  963,  964,  964,  965,  965,  965,  966,  966,  967,

      967,  967,  968,  968,  969,  969,  969,  970,  970,  971,
      971,  971,  972,  972,  973,  973,  973,  974,  974,  975,
      975,  975,  976,  976,  977,  977,  977,  978,  978,  979,
      979,  979,  980,  980,  981,  981,  981,  982,  982,  983,
      983,  983,  984,  984,  985,  985,  985,  986,  986,  987,
      987,  987,  988,  988,  989,  989,  989,  990,  990,  990,
      991,  991,  991,  992,  992,  992,  993,  993,  993,   55,
       46,   45,   44,   39,   38,   37,   35,   32,   31,   30,
       28,   27,   25,   24,   23,   21,   20,   19,   18,   17,
       16,   13,   12,   11,   10,    9,    8,    3,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex.l"
#line 5 "flex.l"
#include <iostream>
#include <string>
#include <unordered_map>
#include <stdlib.h>
#include <time.h>
std::string fname, s;
std::unordered_map<std::string, int> overloads;
int i,j;
clock_t t;
#line 1128 "lex.yy.cc"
#line 1129 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 25 "flex.l"

#line 1263 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 527 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1999 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 26 "flex.l"
{std::cout << "1" << "\n";} 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 27 "flex.l"
{std::cout << "2" << "\n";}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 28 "flex.l"
{std::cout << "3" << "\n";}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 29 "flex.l"
{std::cout << "4" << "\n";}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 30 "flex.l"
{std::cout << "5" << "\n";}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 31 "flex.l"
{std::cout << "6" << "\n";}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 32 "flex.l"
{std::cout << "7" << "\n";}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 34 "flex.l"
{ return 2; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 "flex.l"
ECHO;
	YY_BREAK
#line 1366 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 527 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 527 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 526);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 35 "flex.l"


#include <iostream>
#include <fstream>
#include <FlexLexer.h>
int main()
{
	yyFlexLexer flp;
	std::ifstream in;
	in.open("input.txt");
	flp.switch_streams(in, std::cout);
        while (1)
	{
		if (flp.yylex() == 2)
			break;
	}
	in.close();
}

