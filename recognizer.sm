%header recognizer.hpp
%class Recognizer

%start MainMap::A0

%map MainMap
%%
	Default
	{
		reset() A0 {}
		EOS nil {Incorrect();}
		Unknown Error {}
		Default Error {}
	}

	Error {}	

	A0
	{
		letter(let: char) [let == 'i'] A1 {}
		letter(let: char) [let == 's'] B1 {}
		letter(let: char) [let == 'l'] C1 {}
	}
	A1
	{
		letter(let : char) [let == 'n'] A2 {}
	}
	A2
	{
		letter(let : char) [let == 't'] A3 {}
	}
	A3
	{
                s_push(let : char) [let == ' '] WhiteSpace {}
                s_push(let : char) [let == ','] Comma {}
	}

        B1
        {
                letter(let: char) [let == 'h'] B2 {}
        }
        B2
        {
                letter(let: char) [let == 'o'] B3 {}
        }
        B3
        {
                letter(let: char) [let == 'r'] B4 {}
        }
        B4
        {
                letter(let: char) [let == 't'] B5 {}
        }
	B5
	{
                s_push(let : char) [let == ' '] WhiteSpace {}
                s_push(let : char) [let == ','] Comma {}
	}

	C1
	{
		letter(let: char) [let == 'o'] C2 {}
	}

        C2
        {
                letter(let: char) [let == 'n'] C3 {}
        }

        C3
        {
                letter(let: char) [let == 'g'] C4 {}
        }

        C4
        {
                s_push(let : char) [let == ' '] WhiteSpace {}
		s_push(let : char) [let == ','] Comma {}
        }

	Comma
	{
                letter(let : char) [let == 'i'] A1 {NPush(let);}
                letter(let : char) [let == 's'] B1 {NPush(let);}
                letter(let : char) [let == 'l'] C1 {NPush(let);}
	}

        WhiteSpace
        {
                letter(let : char) FunctionName {NPush(let);}
        }

	FunctionName
	{
		parent(let: char) [let == '('] LeftParent {NPush(let); reset_len();}
		parent(let: char) [let == ')'] RightParent {NPush(let); reset_len();}
		letter(let: char) [context.getOwner().text_len(16)] nil {NPush(let); inc_len();}
		digit(dig: char) [context.getOwner().text_len(16) && !context.getOwner().text_len(0)] nil {NPush(dig); inc_len();}
		s_push(let: char) [let == ' '] WhiteSpace {reset_len();}
		s_push(let: char) [let == ','] Comma {reset_len();}
	}
	LeftParent
	{
		letter(let : char) [let == 'i'] A1 {NPush(let);}
		letter(let : char) [let == 's'] B1 {NPush(let);}
		letter(let : char) [let == 'l'] C1 {NPush(let);}
		parent(let: char) [let == ')'] RightParent {NPush(let);}
	}
        RightParent
        {
                letter(let : char) [let == ';'] Semicolon  {NPush(let);}
        }
	Semicolon
	{
		EOS nil {Correct();}
	}
%%
