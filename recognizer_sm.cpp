//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : recognizer.sm
//

#include "recognizer.hpp"
#include "recognizer_sm.h"

using namespace statemap;

// Static class declarations.
MainMap_Error MainMap::Error("MainMap::Error", 0);
MainMap_A0 MainMap::A0("MainMap::A0", 1);
MainMap_A1 MainMap::A1("MainMap::A1", 2);
MainMap_A2 MainMap::A2("MainMap::A2", 3);
MainMap_A3 MainMap::A3("MainMap::A3", 4);
MainMap_B1 MainMap::B1("MainMap::B1", 5);
MainMap_B2 MainMap::B2("MainMap::B2", 6);
MainMap_B3 MainMap::B3("MainMap::B3", 7);
MainMap_B4 MainMap::B4("MainMap::B4", 8);
MainMap_B5 MainMap::B5("MainMap::B5", 9);
MainMap_C1 MainMap::C1("MainMap::C1", 10);
MainMap_C2 MainMap::C2("MainMap::C2", 11);
MainMap_C3 MainMap::C3("MainMap::C3", 12);
MainMap_C4 MainMap::C4("MainMap::C4", 13);
MainMap_WhiteSpace MainMap::WhiteSpace("MainMap::WhiteSpace", 14);
MainMap_FunctionName MainMap::FunctionName("MainMap::FunctionName", 15);

void RecognizerState::EOS(recognizerContext& context)
{
    Default(context);
}

void RecognizerState::Unknown(recognizerContext& context)
{
    Default(context);
}

void RecognizerState::digit(recognizerContext& context, char dig)
{
    Default(context);
}

void RecognizerState::letter(recognizerContext& context, char let)
{
    Default(context);
}

void RecognizerState::reset(recognizerContext& context)
{
    Default(context);
}

void RecognizerState::s_push(recognizerContext& context)
{
    Default(context);
}

void RecognizerState::Default(recognizerContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void MainMap_Default::reset(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::A0);
    context.getState().Entry(context);


}

void MainMap_Default::EOS(recognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    RecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Incorrect();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void MainMap_Default::Unknown(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);


}

void MainMap_Default::Default(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);


}

void MainMap_A0::letter(recognizerContext& context, char let)
{

    if (let == 'i')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::A1);
        context.getState().Entry(context);
    }
    else if (let == 's')

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::B1);
        context.getState().Entry(context);
    }
    else if (let == 'l')

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::C1);
        context.getState().Entry(context);
    }    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_A1::letter(recognizerContext& context, char let)
{

    if (let == 'n')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::A2);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_A2::letter(recognizerContext& context, char let)
{

    if (let == 't')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::A3);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_A3::s_push(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::WhiteSpace);
    context.getState().Entry(context);


}

void MainMap_B1::letter(recognizerContext& context, char let)
{

    if (let == 'h')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::B2);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_B2::letter(recognizerContext& context, char let)
{

    if (let == 'o')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::B3);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_B3::letter(recognizerContext& context, char let)
{

    if (let == 'r')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::B4);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_B4::letter(recognizerContext& context, char let)
{

    if (let == 't')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::B5);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_B5::s_push(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::WhiteSpace);
    context.getState().Entry(context);


}

void MainMap_C1::letter(recognizerContext& context, char let)
{

    if (let == 'o')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::C2);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_C2::letter(recognizerContext& context, char let)
{

    if (let == 'n')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::C3);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_C3::letter(recognizerContext& context, char let)
{

    if (let == 'g')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::C4);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_C4::s_push(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::WhiteSpace);
    context.getState().Entry(context);


}

void MainMap_WhiteSpace::letter(recognizerContext& context, char let)
{
    Recognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NPush(let);
        context.setState(MainMap::FunctionName);
    }
    catch (...)
    {
        context.setState(MainMap::FunctionName);
        throw;
    }
    context.getState().Entry(context);


}

void MainMap_FunctionName::EOS(recognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    RecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Correct();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void MainMap_FunctionName::digit(recognizerContext& context, char dig)
{
    Recognizer& ctxt = context.getOwner();

    if (context.getOwner().text_len(16) && !context.getOwner().text_len(0))
    {
        RecognizerState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.NPush(dig);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::digit(context, dig);
    }


}

void MainMap_FunctionName::letter(recognizerContext& context, char let)
{
    Recognizer& ctxt = context.getOwner();

    if (context.getOwner().text_len(16))
    {
        RecognizerState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.NPush(let);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::letter(context, let);
    }


}

void MainMap_FunctionName::s_push(recognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::WhiteSpace);
    context.getState().Entry(context);


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
