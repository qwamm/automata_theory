%header SMC_Recognizer.hpp
%class SMC_Recognizer

%start MainMap::A0

%map MainMap
%%
	Default
	{
		reset() A0 {}
		EOS nil {Incorrect();}
		Unknown Error {}
		Default Error {}
	}

	Error {}	

	A0
	{
		letter(let: char) [let == 'i'] A1 {}
		letter(let: char) [let == 's'] B1 {}
		letter(let: char) [let == 'l'] C1 {}
	}
	A1
	{
		letter(let : char) [let == 'n'] A2 {}
	}
	A2
	{
		letter(let : char) [let == 't'] A3 {}
	}
	A3
	{
                s_push(let : char) [let == ' '] WhiteSpace {}
	}

        B1
        {
                letter(let: char) [let == 'h'] B2 {}
        }
        B2
        {
                letter(let: char) [let == 'o'] B3 {}
        }
        B3
        {
                letter(let: char) [let == 'r'] B4 {}
        }
        B4
        {
                letter(let: char) [let == 't'] B5 {}
        }
	B5
	{
                s_push(let : char) [let == ' '] WhiteSpace {}
            
	}

	C1
	{
		letter(let: char) [let == 'o'] C2 {}
	}

        C2
        {
                letter(let: char) [let == 'n'] C3 {}
        }

        C3
        {
                letter(let: char) [let == 'g'] C4 {}
        }

        C4
        {
                s_push(let : char) [let == ' '] WhiteSpace {}
        }

	Comma
	{
                letter(let : char) [let == 'i'] A1 {}
                letter(let : char) [let == 's'] B1 {}
                letter(let : char) [let == 'l'] C1 {}
		s_push(let : char) [let == ' '] WhiteSpace {}
	}

        WhiteSpace
        {
		s_push(let : char) [let == '\t'] WhiteSpace {}
		s_push(let : char) [let == ' '] WhiteSpace {}
		parent(let: char) [let == '('] LeftParent {setParameterTrue();}
                letter(let : char) [context.getOwner().isParameter() == false] FunctionName {NPush(let); inc_len();}
		letter(let : char) [context.getOwner().isParameter() == true] ParameterName {inc_len();}
        }

        ParameterName
        {
                parent(let: char) [let == ')'] RightParent {setParameterFalse(); reset_len();}
                letter(let: char) [context.getOwner().text_len(16)] nil {inc_len();}
                digit(dig: char) [context.getOwner().text_len(16) && !context.getOwner().text_len(0)] nil {inc_len();}
                s_push(let: char) [let == ' '] WhiteSpace {reset_len();}
                s_push(let: char) [let == ','] Comma {reset_len();}
        }

	FunctionName
	{
		parent(let: char) [let == '('] LeftParent {setParameterTrue(); reset_len();}
		letter(let: char) [context.getOwner().text_len(16)] nil {NPush(let); inc_len();}
		digit(dig: char) [context.getOwner().text_len(16) && !context.getOwner().text_len(0)] nil {NPush(dig); inc_len();}
		s_push(let: char) [let == ' '] WhiteSpace {reset_len();}
	}
	LeftParent
	{
		letter(let : char) [let == 'i'] A1 {}
		letter(let : char) [let == 's'] B1 {}
		letter(let : char) [let == 'l'] C1 {}
		parent(let: char) [let == ')'] RightParent {setParameterFalse();}
	}
        RightParent
        {
                letter(let : char) [let == ';'] Semicolon  {setParameterFalse();}
        }
	Semicolon
	{
		EOS nil {Correct();}
	}
%%
